.grid {
  display: grid;
  grid-template-columns: repeat($grid-columns, minmax(0, 1fr));
  grid-gap: spacer(1);

  &.is-dense {
    grid-auto-flow: dense;
  }

  .item {
    width: 100%;
    grid-column: span 1;
    grid-row: span 1;
  }

  @each $size, $sizeKey in $grid-item-sizes {
    &.has-items-#{$size} {
      grid-template-columns: repeat(
        auto-fit,
        minmax(#{grid-item-size($size)}, 1fr)
      );
    }
  }

  @each $bp, $bpKey in $breakpoints {
    @if $bp != xs {
      @each $key, $spacer in $spacers {
        @include min(#{bp(#{$bp})}) {
          .has-col-#{$bp}-all {
            grid-column: 1 / -1;
          }

          .has-row-#{$bp}-all {
            grid-row: 1 / -1;
          }

          @for $i from 1 through $grid-columns {
            .has-col-#{$bp}-#{$i} {
              grid-column: span $i;
            }
          }

          @for $i from 1 through 10 {
            .has-row-#{$bp}-#{$i} {
              grid-row: span $i;
            }
          }

          &.has-grid-gap-#{$bp}-#{$key} {
            grid-gap: spacer($key);
          }
        }
      }
    } @else {
      .has-col-all {
        grid-column: 1 / -1;
      }

      .has-row-all {
        grid-row: 1 / -1;
      }

      @for $i from 1 through $grid-columns {
        .has-col-#{$i} {
          grid-column: span $i;
        }
      }

      @for $i from 1 through 10 {
        .has-row-#{$i} {
          grid-row: span $i;
        }
      }

      @each $key, $spacer in $spacers {
        &.has-grid-gap-#{$key} {
          grid-gap: spacer($key);
        }
      }
    }
  }
}

// ------------------------------
// KSS Documentation
// ------------------------------

// Grid
//
// Atomic Bulldog use CSS grid layout for its grid. We have two ways of creating a grid first one the `fluid` way, second option is the `rigid` way.
//
// Styleguide Layout.Grid

// Grid - Rigid
//
// 
//
// Styleguide Layout.Grid.rigid

// Grid - Fluid
//
// The fluid grid is set by adding .has-items-{size}. We need as well to give the .grid children the class of .item.
//
// This option do not use media queries, We automaticly adjust the grid depending on the size of the items using `grid-template-columns: repeat(auto-fit,minmax(#{grid-item-size($size)}, 1fr));`.
//
// markup:
// <div class="grid {{modifier_class}} has-grid-gap-3">
//     <div class="item box">1</div>
//     <div class="item box">2</div>
//     <div class="item box">3</div>
//     <div class="item box">4</div>
//     <div class="item box">5</div>
//     <div class="item box">6</div>
//     <div class="item box">7</div>
//     <div class="item box">8</div>
//     <div class="item box">9</div>
//     <div class="item box">10</div>
// </div>
// 
// .has-items-xs - xs Fuild items
// .has-items-sm - sm Fuild items
// .has-items-md - md Fuild items
// .has-items-lg - lg Fuild items
// .has-items-xl - xl Fuild items
// .has-items-xxl - xxl Fuild items
//
// Styleguide Layout.Grid.fluid