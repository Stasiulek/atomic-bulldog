// ------------------------------
// Grid, using CSS Grid Layout
// ------------------------------
.grid {
  display: grid;
  grid-template-columns: repeat($grid-columns, minmax(0, 1fr));
  grid-gap: spacer(1);
  grid-auto-flow: dense;

  // Set item size
  .item {
    width: 100%;
    grid-column: span 1;
    grid-row: span 1;
  }

  // Set item sizes for fluid grid
  @each $size, $sizeKey in $grid-item-sizes {
    &.has-items-#{$size} {
      grid-template-columns: repeat(
        auto-fit,
        minmax(#{grid-item-size($size)}, 1fr)
      );
    }
  }

  // Set grid responsive classes
  @each $bp, $bpKey in $breakpoints {
    @if $bp != xs {
      @include min(#{bp(#{$bp})}) {
        // Full col item
        .has-col-#{$bp}-all {
          grid-column: 1 / -1;
        }

        // Full row item
        .has-row-#{$bp}-all {
          grid-row: 1 / -1;
        }

        // Set item number of col
        @for $i from 1 through $grid-columns {
          .has-col-#{$bp}-#{$i} {
            grid-column: span $i;
          }
        }

        // Set item number of row
        @for $i from 1 through $grid-columns {
          .has-row-#{$bp}-#{$i} {
            grid-row: span $i;
          }
        }

        // Set grid gap
        @each $key, $spacer in $spacers {
          &.has-grid-gap-#{$bp}-#{$key} {
            grid-gap: spacer($key);
          }
        }
      }
    } @else {
      .has-col-all {
        grid-column: 1 / -1;
      }

      .has-row-all {
        grid-row: 1 / -1;
      }

      @for $i from 1 through $grid-columns {
        .has-col-#{$i} {
          grid-column: span $i;
        }
      }

      @for $i from 1 through 10 {
        .has-row-#{$i} {
          grid-row: span $i;
        }
      }

      @each $key, $spacer in $spacers {
        &.has-grid-gap-#{$key} {
          grid-gap: spacer($key);
        }
      }
    }
  }
}

// ------------------------------
// KSS Documentation
// ------------------------------

// Grid
//
// Atomic Bulldog use CSS grid layout for its grid. We have two ways of creating a grid. First one the `fluid` way, second option is the `rigid` way.
//
// Styleguide Layout.Grid

// ------------------------------
/////////////////////////////////
// ------------------------------

// Grid - Rigid
//
//
// The rigid grid is base 12 col, This grid is two dimentional, meaning it can grow in the horizontal axis (has-col-{breakpoint}-{size}) and on the vertical axis (has-row-{breakpoint}-{size}).
//
// {breakpoint} is set from the `$breakpoints` map (see variables), {size} are set as well in variables. It goes from 0 to 12 ($grid-columns)
//
// markup:
// <div class="grid has-grid-gap-3">
//     <div class="item has-col-6 has-col-md-3 has-col-lg-4 has-row-md-2 has-row-lg-3 box">1</div>
//     <div class="item has-col-6 has-col-md-3 has-col-lg-4 box">2</div>
//     <div class="item has-col-6 has-col-md-3 has-col-lg-4 has-row-md-2 box">3</div>
//     <div class="item has-col-6 has-col-md-3 has-col-lg-4 box">4</div>
//     <div class="item has-col-6 has-col-md-3 has-col-lg-4 box">5</div>
//     <div class="item has-col-6 has-col-md-3 has-col-lg-8 box">6</div>
// </div>
//
// Styleguide Layout.Grid.a

// ------------------------------
/////////////////////////////////
// ------------------------------

// Grid - Fluid
//
// The fluid grid is set by adding .has-items-{size}. We need as well to give the .grid children the class of .item.
//
// This option do not use media queries, We automaticly adjust the grid depending on the size of the items using `grid-template-columns: repeat(auto-fit,minmax(#{grid-item-size($size)}, 1fr));`.
//
// markup:
// <div class="grid {{modifier_class}} has-grid-gap-3">
//     <div class="item box">1</div>
//     <div class="item box">2</div>
//     <div class="item box">3</div>
//     <div class="item box">4</div>
//     <div class="item box">5</div>
//     <div class="item box">6</div>
//     <div class="item box">7</div>
//     <div class="item box">8</div>
//     <div class="item box">9</div>
//     <div class="item box">10</div>
// </div>
//
// .has-items-xs - xs Fuild items
// .has-items-sm - sm Fuild items
// .has-items-md - md Fuild items
// .has-items-lg - lg Fuild items
// .has-items-xl - xl Fuild items
// .has-items-xxl - xxl Fuild items
//
// Styleguide Layout.Grid.b

// ------------------------------
/////////////////////////////////
// ------------------------------

// Row
//
// Rows can be expended using the class `has-row-{breakpoint}-{size}` sizes goes from 0 to 12. .has-row-all can be use as well but in this case the grid need to have
//`grid-template-rows` set, so the item can grow depending of the number of rows.
//
// markup:
// <div class="grid has-items-sm has-grid-gap-2" style="grid-template-rows: repeat(5, 1fr)"> <!-- Set grid-template-rows for .has-row-all-->
//     <div class="item box has-row-all">1</div>
//     <div class="item box">2</div>
//     <div class="item box">3</div>
//     <div class="item box">4</div>
//     <div class="item box has-row-2">5</div>
//     <div class="item box">6</div>
//     <div class="item box">7</div>
//     <div class="item box">8</div>
//     <div class="item box">9</div>
//     <div class="item box">10</div>
// </div>
//
// Styleguide Layout.Grid.modifiers.row

// ------------------------------
/////////////////////////////////
// ------------------------------

// Col
//
// Columns can be expended using the class `has-col-{breakpoint}-{size}` sizes goes from 0 to 12. .has-col-all can be use as well, the item will then take the full width.
//
// markup:
// <div class="grid has-items-sm has-grid-gap-2">
//     <div class="item box has-col-all">1</div>
//     <div class="item box">2</div>
//     <div class="item box">3</div>
//     <div class="item box">4</div>
//     <div class="item box has-col-2">5</div>
//     <div class="item box">6</div>
//     <div class="item box">7</div>
//     <div class="item box">8</div>
//     <div class="item box">9</div>
//     <div class="item box">10</div>
// </div>
//
// Styleguide Layout.Grid.modifiers.col

// ------------------------------
/////////////////////////////////
// ------------------------------

// Gaps
//
// Grid gap can be change using `.has-grid-gap-{size}` class. This class use the $spacers map variables
//
// markup:
// <div class="grid has-items-md {{modifier_class}}">
//     <div class="item box">1</div>
//     <div class="item box">2</div>
//     <div class="item box">3</div>
//     <div class="item box">4</div>
//     <div class="item box">5</div>
//     <div class="item box">6</div>
//     <div class="item box">7</div>
//     <div class="item box">8</div>
//     <div class="item box">9</div>
//     <div class="item box">10</div>
// </div>
//
// .has-grid-gap-0 - Grid Gap 0
// .has-grid-gap-1 - Grid Gap 1
// .has-grid-gap-2 - Grid Gap 2
// .has-grid-gap-3 - Grid Gap 3
// .has-grid-gap-4 - Grid Gap 4
// .has-grid-gap-5 - Grid Gap 5
// .has-grid-gap-6 - Grid Gap 6
//
// Styleguide Layout.Grid.modifiers.gap
